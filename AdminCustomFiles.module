<?php

/**
 * Admin Custom Files
 *
 *
 * This module can add custom scripts and files to the admin.
 * You can add content by simply putting a [tplname].html or [tplname].md file in /templates/notes/
 *
 *
 * ProcessWire 2.x
 * Copyright (C) 2010 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 */

class AdminCustomFiles extends WireData implements Module, ConfigurableModule {

    /**
     * getModuleInfo is a module required by all modules to tell ProcessWire about them
     *
     * @return array
     *
     */

    public static function getModuleInfo() {
        return array(
            'title' => 'Admin Custom Files',
            'version' => 1,
            'author' => 'Martijn Geerts',
            'summary' => 'Add custom scripts & styles to the admin with optional dependencies',
            'singular' => true,
            'autoload' => "template=admin",
            'icon' => 'file-code-o'
            );
    }



    // (string) Gobal files without Process dependencies
    private $filter = null;
    // (string) Name of the current admin process
    private $process_name = null;
    // (string) Name of the template to edit if the process is ProcessPageEdit
    private $template_name = null;
    // (array) Converted textarea Dependencies to array
    private $dependency_array = array();
    // (array) Gobal files without Process dependencies
    private $global_files = array();
    // (array) Gobal files with Process dependencies
    private $dependency_files = array();
    // (array) AdminCustomFiles depending on admin process
    private $process_files = array();
    // (array) On ProcessPageEdit process the edited page template file
    private $template_file = array();



    /**
     * Factory settings
     *
     */

    private static $factorySettings = array(
        'files_folder' => 'AdminCustomFiles',
    );



    /**
     * Set defaults for getConfig()
     *
     */

    public function __construct() {
        $this->set('files_folder', $this->factorySettings['files_folder']);
    }



    /**
     * Helper function to convert newlines to array.
     *
     * @return array
     */

    private function explode($string) {
        return array_map('trim', explode("\n", $string));
    }



    /**
     * Helper function to return a valid URL or false.
     *
     * @return mixed
     */

    private function file($string) {
        $url = $this->config->urls->templates;
        $path = $this->config->paths->templates;
        return file_exists($path . $string) ? $url . $string : false;
    }




    /**
     * On API ready, controller & set the hook
     *
     */

    public function ready() {
        // Current processname
        $this->process_name = (string) $this->page->process;
        // Processes enabled ?
        $this->filter = in_array($this->process_name, $this->process_filter);
        // All dependencies
        $this->dependency_array = $this->explode($this->dependencies);
        // Is the ProcessPageEdit && are the filters set
        $this->template_name = $this->filter && $this->process_name == 'ProcessPageEdit' ? $this->pages->get($this->input->id)->template->name : null;
        // Create dependencies array
        $this->createDependencies();
        // Get the template name if process is ProcessPageEdit
        $this->createProcessFiles();
        // Hook it
        $this->addHookAfter('Process::execute', $this, 'injectFiles');
    }




    /**
     * Most likely these are plug-ins the admin custom files rely on. (Dependencies Settings)
     *
     */

    private function createDependencies() {
        if (!count($this->dependency_array)) return false;
        foreach ($this->dependency_array as $dependency) {
            $type = strpos($dependency, ' ') > 0 ? 'dependency' : 'global';
            if ($type === 'dependency' && !$this->filter) continue;
            if ($type === 'dependency' && strpos($dependency, $this->process_name) !== 0) continue;
            if ($type === 'dependency') { $dependency = str_replace($this->process_name, '', $dependency); }
            $file = $this->file(trim($dependency));
            if (!$file) continue;
            if ($type === 'dependency') {
                $this->dependency_files[] = $file;
            } else {
                $this->global_files[] = $file;
            }
        }
    }



    /**
     * Scripts & files inside the AdminCustomFiles triggered on the running page process.
     *
     */

    private function createProcessFiles() {
        if (!$this->filter) return false;
        $AdminCustomFiles = $this->config->paths->templates . $this->files_folder;
        if (!$this->files_folder || !file_exists($AdminCustomFiles)) return false;
        $AdminCustomFiles = scandir($AdminCustomFiles);
        foreach ($AdminCustomFiles as $file) {
            if (strpos($file, '.') === 0) continue;
            if (strpos($file, $this->process_name) === 0) {
                $this->process_files[] = $this->file($this->files_folder . "/" . $file);
            } else if ($this->template_name && strpos($file, $this->template_name) === 0) {
                $this->template_file[] = $this->file($this->files_folder . "/" . $file);
            }
        }
    }



    /**
     * Append scripts & styles to the filenamearray
     *
     */

    protected function injectFiles() {

        $files = array_merge(
            $this->global_files,
            $this->dependency_files,
            $this->process_files,
            $this->template_file
        );

        foreach ($files as $file) {
            if (strpos($file, '.css') !== false) {
                $this->config->styles->append($file);
            } else if (strpos($file, '.js') !== false) {
                $this->config->scripts->append($file);
            }
        }
    }



    /**
     * Module configuration
     *
     */

    public static function getModuleConfigInputfields(array $data) {
        return wire('modules')->get('AdminCustomFiles')->getConfig();
    }



    /**
     * Convenience method escaping the static visibility for getModuleConfigInputfields
     *
     */

    private function getConfig() {

        // If scripts & styles folder is blank use factory settings
        $files_folder = trim($this->files_folder);
        $empty_config_data = array();
        foreach (self::$factorySettings as $key => $value) {
            if ($this->data[$key]) continue;
            $empty_config_data[$key] = $value;
        }
        if (count($empty_config_data)) { $this->modules->saveModuleConfigData($this->className(), $empty_config_data); }

        $inputfields = new InputfieldWrapper();

        // process_filter
        $field = $this->modules->get('InputfieldAsmSelect');
        $field->attr('name', 'process_filter');
        $field->label = $this->_('Enable for process');
        $field->description = $this->_('Scripts & styles are only appended to pages running the selected process.');
        foreach ($this->modules as $module) {
            $name = (string) $module;
            if (strpos($name, 'Process') !== 0 ) continue;
            $info = $this->wire('modules')->getModuleInfo($name);
            $label = !empty($info['title']) ? $info['title'] : $name;
            $field->addOption($name, "$name, ($label)");
        }
        $field->attr('value', is_array($this->process_filter) ? $this->process_filter : array());
        $inputfields->add($field);

        // files_folder
        $field = $this->modules->get('InputfieldText');
        $field->attr('name', 'files_folder');
        $field->label = $this->_('Scripts & styles folder');
        $description  = $this->_('In this folder you can place scripts and styles. ');
        $description .= $this->_('Those files should be named as an admin process with extension css or js. ');
        $description .= "\n";
        $description .= $this->_('For the process ProcessPageEdit, you can additionaly use the template name with .js or .css.');  // Columns description
        $field->description  = $description;  // Columns description
        $field->value = $files_folder ? $files_folder : self::$factorySettings['files_folder'];
        $inputfields->add($field);

        // dependencies
        $field = $this->modules->get('InputfieldTextarea');
        $field->attr('name', 'dependencies');
        $field->label = $this->_('Dependencies');
        $description  = $this->_('(1) Say you want to use the jquery.validate plug-in to validate the fields in the “Edit Page forms” type the ProcessPageEdit followed by the url to the jquery plug-in. ');
        $description .= $this->_('If the process matches the running admin process (i.e. ProcessPageEdit ) and that process is enabled ➊ this dependency will load before the other scripts & files.');
        $description .= "\n";
        $description .= $this->_('(2) When you type a url without a preceding admin process, the file will be included, regardless if the process is enabled.');
        $description .= "\n\n";
        $description .= $this->_('Every dependency on it’s own line. Urls relative to the processwire templates folder.');
        $field->description = $description;
        $notes  = 'ProcessPageEdit scripts/plug-ins/jquery.validate/jquery.validate.js';
        $notes .= "\n";
        $notes .= '➊ Process should be selected in the asmSelect';

        $field->notes = $notes;
        $field->value = trim($this->dependencies);
        $inputfields->add($field);

        return $inputfields;
    }
}
